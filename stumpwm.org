#+TITLE: stumpwm configuration
#+AUTHOR: calx

(made :with lisp)

#+BEGIN_SRC common-lisp :tangle init.lisp
  (in-package :stumpwm-user)
#+END_SRC

* modules

#+BEGIN_SRC common-lisp :tangle init.lisp
  (load-module "cpu")
  (load-module "mem")
  (load-module "net")
  (load-module "stumptray")
#+END_SRC

* utils

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defun notifier (summary &key body icon replace-id expire-time app-name category)
    (check-type replace-id (or integer null))
    (let ((cmd ))
      (run-shell-command (format nil "notify-send~@[ -i ~S~]~@[ -r ~A~]~@[ -t ~D~]~@[ -a ~S~]~@[ -c ~S~] ~S~@[ ~S~]"
  			       (when icon (uiop:native-namestring icon))
  			       replace-id expire-time app-name category summary body)
       t)))
#+END_SRC

* commands

** system commands

- DEPENDENCY: ~systemd~, ~xsecurelock~

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-stumpwm-type :system-commands (input prompt)
    (let ((cmds '(("sleep"	:sleep)
  		("lock"		:lock)
  		("reboot"	:reboot)
  		("power-off"	:power-off)
  		("shutdown"	:power-off))))
      (or (second (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  		       cmds :test #'string=))
  	(throw 'error :abort))))

  (defcommand system (cmd)
      ((:system-commands "Pick a system command: "))
    (case cmd
      (:lock	(run-shell-command "xsecurelock"))
      (:power-off (run-shell-command "shutdown now" t))
      (:reboot	(run-shell-command "reboot" t))
      (:sleep	(run-shell-command "systemctl sleep" t))
      (t (throw 'error "invalid system command"))))
#+END_SRC

** volume commands

- TODO: load ~yason~ "the correct way"
- DEPENDENCY: ~pactl~

#+BEGIN_SRC common-lisp :tangle init.lisp
  (ql:quickload :yason)

  (defparameter +volume-notification-replace-id+ (random (expt 2 16)))

  (defun volume--default-sink-name ()
    (gethash "default_sink_name" (yason:parse (run-shell-command "pactl -f json info" t))))

  (defun volume--get-sink (&optional (sink-name (volume--default-sink-name)))
    (find sink-name (gethash "sinks" (yason:parse (run-shell-command "pactl -f json list" t)))
  	:test #'string=
  	:key #'(lambda (sink) (gethash "name" sink))))

  (defun volume--get-sink-volume (&optional (sink (volume--get-sink)))
    (list
     (gethash "value_percent" (gethash "front-left" (gethash "volume" sink)))
     (gethash "value_percent" (gethash "front-right" (gethash "volume" sink)))
     (gethash "mute" sink)))

  (defun volume-show ()
    (notifier "Volume"
  	    :body (format nil "~{Volume: ~A // ~A~%Muted:  ~:[no~;yes~]~}"
  			  (volume--get-sink-volume))
  	    :replace-id +volume-notification-replace-id+
  	    :expire-time 800))

  (define-stumpwm-type :volume-commands (input prompt)
    (let* ((cmds '(("increase"	:increase t)
  		 ("inc"		:increase t)
  		 ("decrease"	:decrease t)
  		 ("dec"		:decrease t)

  		 ("show"        :show nil)
  		 ("toggle-mute" :toggle-mute nil)
  		 ("force-mute"	:force-mute  nil)))
  	 (choice (or (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  			    cmds :test #'string=)
  		     (throw 'error "invalid volume command"))))
      (if (third choice)
  	(list (second choice)
  	      (parse-integer (argument-pop-or-read input "Enter delta: ")
  			     :junk-allowed nil))
  	(list (second choice) nil))))

  (defcommand volume (cmd)
      ((:volume-commands "Pick a volume command: "))
    (case (first cmd)
      (:show
       (volume-show))
      (:toggle-mute
       (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle" t)
       (volume-show))
      (:force-mute
       (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ yes" t)
       (volume-show))
      (:increase
       (check-type (second cmd) integer)
       (run-shell-command
        (format nil "pactl set-sink-volume @DEFAULT_SINK@ +~D%" (second cmd))
        t)
       (volume-show))
      (:decrease
       (check-type (second cmd) integer)
       (run-shell-command
        (format nil "pactl set-sink-volume @DEFAULT_SINK@ -~D%" (second cmd))
        t)
       (volume-show))
      (t (throw 'error "invalid volume command"))))
#+END_SRC

** player commands

- DEPENDENCY: ~playerctl~

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defparameter +player-notification-replace-id+ (random (expt 2 16)))

  (defun player--remove-file-protocol (filename &optional (prefix "file://"))
    (if (and (> (length filename) (length prefix))
  	   (string= (subseq filename 0 (length prefix)) prefix))
        (subseq filename (length prefix))
        filename))

  (defun player--load-metadata ()
    (cl-ppcre:split "
  " (run-shell-command "playerctl metadata --format '{{title}}
  {{artist}}
  {{album}}
  {{status}}
  {{playerName}}
  {{duration(position)}}
  {{duration(mpris:length)}}
  {{mpris:artUrl}}'" t)))

  (defun player-show ()
    (let ((metadata (player--load-metadata)))
      (when metadata
        (destructuring-bind (title artist album status player-name position length &optional icon)
  	  metadata
  	(notifier title
  		  :body (format nil "~:[Album: ~A~%~;~*~]~:[By: ~A~%~;~*~]~A on ~A for ~A of ~A"
  			        (zerop (length album)) album
  				(zerop (length artist)) artist
  				status player-name position length)
  		  :replace-id +player-notification-replace-id+
  		  :icon (when icon (probe-file (player--remove-file-protocol icon))))))))

  (define-stumpwm-type :player-commands (input prompt)
    (let ((cmds '(("show"		:show)
  		("play"		:play)
  		("pause"	:pause)
  		("play-pause"	:play-pause)
  		("toggle-play"	:play-pause)
  		("previous"	:previous)
  		("prev"		:previous)
  		("next"		:next)
  		("stop"		:stop))))
      (or (second (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  		       cmds :test #'string=))
  	(throw 'error :abort))))

  (defcommand player (cmd)
      ((:player-commands "Pick a player command: "))
    (case cmd
      (:show
       (player-show))
      ((:play :pause :play-pause :previous :next :stop)
       (run-shell-command (format nil "playerctl ~(~A~)" cmd) t)
       (player-show))
      (t (throw 'error "invalid player command"))))
#+END_SRC

** screenshot commands

- DEPENDENCY: ~scrot~, ~xclip~

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defun screenshot--list-screenshots ()
    (directory (make-pathname :directory '(:absolute :home "captures") :name :wild :type :wild)))

  (defun screenshot--find-latest (&optional (file-list (screenshot--list-screenshots)))
    (when file-list
      (loop with latest-file = (first file-list)
  	  with latest-ctime = (sb-posix:stat-ctime (sb-posix:stat latest-file))
  	  for file in (rest file-list)
  	  for ctime = (sb-posix:stat-ctime (sb-posix:stat file))
  	  when (> ctime latest-ctime)
  	    do (setf latest-file file
  		     latest-ctime ctime)
  	  finally (return latest-file))))

  (defun screenshot--copy-to-clipboard (&optional
  					(filename (screenshot--find-latest))
  					(filetype "image/png"))
    (when filename
      (run-shell-command (format nil "xclip -selection clipboard -t ~A -i ~A"
  			       filetype filename)
  		       t)))

  (define-stumpwm-type :screenshot-commands (input prompt)
    (let* ((cmds '(("delayed"		:delayed "Enter time (in sec): ")

  		 ("full-screen"		:capture nil)
  		 ("current-window"	:capture-window nil)
  		 ("interactive"		:capture-interactive nil)
  		 ("copy-to-clipboard"	:copy-to-clipboard nil)))
  	 (choice (or (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  			    cmds :test #'string=)
  		     (throw 'error "invalid screenshot command"))))
      (if (third choice)
  	(list (second choice)
  	      (parse-integer (argument-pop-or-read input (third choice))
  			     :junk-allowed nil))
  	(list (second choice) nil))))

  (defcommand screenshot (cmd)
      ((:screenshot-commands "Pick a screenshot command: "))
    (case (first cmd)
      (:capture
       (run-shell-command "scrot ~/captures/%Y-%m-%d_%H:%M:%S.png" t))
      (:delayed
       (check-type (second cmd) integer)
       (run-shell-command
        (format nil "scrot -d ~D ~~/captures/%Y-%m-%d_%H:%M:%S.png" (second cmd))))
      (:capture-window
       (run-shell-command "scrot -u ~/captures/\\$W.%Y-%m-%d_%H:%M:%S.png" t))
      (:capture-interactive
       (run-shell-command "scrot -s -f ~/captures/%Y-%m-%d_%H:%M:%S.png" t))
      (:copy-to-clipboard
       (screenshot--copy-to-clipboard))
      (t (throw 'error "invalid player command"))))
#+END_SRC

* key setup

** root map

#+BEGIN_SRC common-lisp :tangle init.lisp
  (set-prefix-key (kbd "s-t"))

  (define-key *root-map* (kbd "r") "restart-hard")
#+END_SRC

** motion keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-j") "fnext")
  (define-key *top-map* (kbd "s-k") "fprev")

  (define-key *top-map* (kbd "s-n") "pull-hidden-next")
  (define-key *top-map* (kbd "s-p") "pull-hidden-previous")

  (define-key *top-map* (kbd "s-]") "gnext")
  (define-key *top-map* (kbd "s-[") "gprev")
#+END_SRC

** program keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-RET") "exec alacritty")

  (define-key *top-map* (kbd "s-z") "exec emacsclient -c -a 'emacs'")
  (define-key *top-map* (kbd "s-Z") "exec emacs")
#+END_SRC

** other keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-d") "exec")
  (define-key *top-map* (kbd "s-c") "exec rofi -show drun")

  (define-key *top-map* (kbd "s-g") "abort")
#+END_SRC

** controller keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  ;; volume control
  (define-key *top-map* (kbd "XF86AudioMute") "volume toggle-mute")
  (define-key *top-map* (kbd "C-XF86AudioMute") "volume force-mute")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume inc 10")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "volume dec 10")
  (define-key *top-map* (kbd "S-XF86AudioRaiseVolume") "volume inc 2")
  (define-key *top-map* (kbd "S-XF86AudioLowerVolume") "volume dec 2")

  ;; player control
  (define-key *top-map* (kbd "XF86AudioPlay") "player toggle-play")
  (define-key *top-map* (kbd "XF86AudioPrev") "player prev")
  (define-key *top-map* (kbd "XF86AudioNext") "player next")

  ;; screenshot
  (define-key *top-map* (kbd "SunPrint_Screen") "screenshot full-screen")
  (define-key *top-map* (kbd "C-SunPrint_Screen") "screenshot current-window")
  (define-key *top-map* (kbd "M-SunPrint_Screen") "screenshot interactive")
#+END_SRC

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defvar *controller-map* (make-sparse-keymap))

  (define-key *controller-map* (kbd "i") "volume inc 10")
  (define-key *controller-map* (kbd "I") "volume inc 2")
  (define-key *controller-map* (kbd "d") "volume dec 10")
  (define-key *controller-map* (kbd "D") "volume dec 2")
  (define-key *controller-map* (kbd "m") "volume toggle-mute")
  (define-key *controller-map* (kbd "M") "volume force-mute")

  (define-key *controller-map* (kbd "p") "player play-pause")
  (define-key *controller-map* (kbd "P") "player pause")

  (define-key *controller-map* (kbd "s") "screenshot full-screen")
  (define-key *controller-map* (kbd "S") "screenshot interactive")
  (define-key *controller-map* (kbd "c") "screenshot copy-to-clipboard")
  (define-key *controller-map* (kbd "C") "screenshot current-window")

  (define-key *top-map* (kbd "s-a") *controller-map*)
#+END_SRC

** system keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defvar *system-map* (make-sparse-keymap))

  (define-key *system-map* (kbd "S") "system power-off")
  (define-key *system-map* (kbd "r") "system reboot")
  (define-key *system-map* (kbd "s") "system sleep")
  (define-key *system-map* (kbd "x") "system lock")

  ;; (define-key *root-map* (kbd "x") '*system-map*)
  (define-key *top-map* (kbd "s-x") '*system-map*)
#+END_SRC

* group setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (grename "home")
#+END_SRC

* mode-line setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf *time-format-string* "%a %b %e %Y %k:%M:%S")
  (setf *screen-mode-line-format*
  	(list "[%n]"    ; current group name
  	      "%v"      ; open windows
  	      "^>"
  	      " | %C"   ; cpu monitor
  	      " | %M"   ; memory monitor
  	      " | %l"   ; network monitor
  	      " | %d"   ; date
  	      " | %T")) ; sets space for tray icons
  (setf *mode-line-timeout* 1)
  (setf *mode-line-position* :bottom)
  (setf *mode-line-background-color* "#000000")
  (setf *mode-line-foreground-color* "#FFFFFF")
#+END_SRC

** cpu setup

- TODO: facing issues with the complete fmt
- TODO: add temperature support

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf cpu::*cpu-modeline-fmt* "%c (%f)")
#+END_SRC

** start mode-line

#+BEGIN_SRC common-lisp :tangle init.lisp
  (mode-line)
#+END_SRC

** stumptray setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf stumptray::*tray-viwin-background* *mode-line-background-color*)
  (setf stumptray::*tray-placeholder-pixels-per-space* 7)

  (stumptray::stumptray)
#+END_SRC

* other setup

- TODO: use better font

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf *mouse-focus-policy* :sloppy)

  (setf *message-window-gravity* :center
        ,*message-window-input-gravity* :center
        ,*input-window-gravity* :center)
#+END_SRC

* spawn once

- TODO: don't respawn on restart
- MAYBE: start emacs server

#+BEGIN_SRC common-lisp :tangle init.lisp
  (loop for cmd in (list "~/.fehbg"
  		       "xsetroot -cursor_name left_ptr"
  		       "picom"
  		       "nm-applet"
  		       "dunst")
        do (run-shell-command cmd))
#+END_SRC
