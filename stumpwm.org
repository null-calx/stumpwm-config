#+TITLE: stumpwm configuration
#+AUTHOR: calx

(made :with lisp)

#+BEGIN_SRC common-lisp :tangle init.lisp
  (in-package :stumpwm-user)
#+END_SRC

* modules

#+BEGIN_SRC common-lisp :tangle init.lisp
  (load-module "cpu")
  (load-module "mem")
  (load-module "net")
  (load-module "stumptray")
#+END_SRC

* commands

** system commands

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-stumpwm-type :system-commands (input prompt)
    (let ((cmds '(("sleep"	:sleep)
  		("lock"		:lock)
  		("reboot"	:reboot)
  		("power-off"	:power-off)
  		("shutdown"	:power-off))))
      (or (second (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  		       cmds :test #'string=))
  	(throw 'error :abort))))

  (defcommand system (cmd)
      ((:system-commands "Pick a system command: "))
    (case cmd
      (:lock	(run-shell-command "xsecurelock"))
      (:power-off (run-shell-command "shutdown now" t))
      (:reboot	(run-shell-command "reboot" t))
      (:sleep	(run-shell-command "systemctl sleep" t))
      (t (throw 'error "invalid system command"))))
#+END_SRC

** volume commands

#+BEGIN_SRC common-lisp :tangle init.lisp
  (ql:quickload :yason)

  (defun volume--default-sink-name ()
    (gethash "default_sink_name" (yason:parse (run-shell-command "pactl -f json info" t))))

  (defun volume--get-sink (&optional (sink-name (volume--default-sink-name)))
    (find sink-name (gethash "sinks" (yason:parse (run-shell-command "pactl -f json list" t)))
  	:test #'string=
  	:key #'(lambda (sink) (gethash "name" sink))))

  (defun volume--get-sink-volume (&optional (sink (volume--get-sink)))
    (list
     (gethash "value_percent" (gethash "front-left" (gethash "volume" sink)))
     (gethash "value_percent" (gethash "front-right" (gethash "volume" sink)))
     (gethash "mute" sink)))

  (defun volume-show ()
    (message "~{VOLUME: ~A // ~A~%MUTED:  ~:[no~;yes~]~}" (volume--get-sink-volume)))

  (define-stumpwm-type :volume-commands (input prompt)
    (let* ((cmds '(("increase"	:increase t)
  		 ("inc"		:increase t)
  		 ("decrease"	:decrease t)
  		 ("dec"		:decrease t)

  		 ("show"        :show nil)
  		 ("toggle-mute" :toggle-mute nil)
  		 ("force-mute"	:force-mute  nil)))
  	 (choice (or (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  			    cmds :test #'string=)
  		     (throw 'error "invalid volume command"))))
      (if (third choice)
  	(list (second choice)
  	      (parse-integer (argument-pop-or-read input "Enter delta: ")
  			     :junk-allowed nil))
        (list (second choice) nil))))

  (defcommand volume (cmd)
      ((:volume-commands "Pick a volume command: "))
    (case (first cmd)
      (:show
       (volume-show))
      (:toggle-mute
       (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ toggle" t)
       (volume-show))
      (:force-mute
       (run-shell-command "pactl set-sink-mute @DEFAULT_SINK@ yes" t)
       (volume-show))
      (:increase
       (check-type (second cmd) integer)
       (run-shell-command
        (format nil "pactl set-sink-volume @DEFAULT_SINK@ +~D%" (second cmd))
        t)
       (volume-show))
      (:decrease
       (check-type (second cmd) integer)
       (run-shell-command
        (format nil "pactl set-sink-volume @DEFAULT_SINK@ -~D%" (second cmd))
        t)
       (volume-show))
      (t (throw 'error "invalid volume command"))))
#+END_SRC

** player controls

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defun player-show ()
    (message (run-shell-command "playerctl metadata --format '{{title}}
  {{default(artist, \"<unknown-artist>\")}} -- {{default(album, \"<unknown-album>\")}}
  {{lc(status)}} on {{playerName}} ({{duration(position)}} of {{duration(mpris:length)}})'" t)))

  (define-stumpwm-type :player-commands (input prompt)
    (let ((cmds '(("show" :show)
  		("play" :play)
  		("pause" :pause)
  		("play-pause" :play-pause)
  		("toggle-play" :play-pause)
  		("previous" :previous)
  		("prev" :previous)
  		("next" :next)
  		("stop" :stop))))
      (or (second (assoc (argument-pop-or-read input prompt (mapcar #'first cmds))
  		       cmds :test #'string=))
  	(throw 'error :abort))))

  (defcommand player (cmd)
      ((:player-commands "Pick a player command: "))
    (case cmd
      (:show
       (player-show))
      ((:play :pause :play-pause :previous :next :stop)
       (run-shell-command (format nil "playerctl ~(~A~)" cmd) t)
       (player-show))
      (t (throw 'error "invalid player command"))))
#+END_SRC

* key setup

** root map

#+BEGIN_SRC common-lisp :tangle init.lisp
  (set-prefix-key (kbd "s-t"))

  (define-key *root-map* (kbd "r") "restart-hard")
#+END_SRC

** motion keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-j") "fnext")
  (define-key *top-map* (kbd "s-k") "fprev")

  (define-key *top-map* (kbd "s-n") "pull-hidden-next")
  (define-key *top-map* (kbd "s-p") "pull-hidden-previous")

  (define-key *top-map* (kbd "s-]") "gnext")
  (define-key *top-map* (kbd "s-[") "gprev")
#+END_SRC

** program keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-RET") "exec alacritty")

  (define-key *top-map* (kbd "s-z") "exec emacsclient -c -a 'emacs'")
  (define-key *top-map* (kbd "s-Z") "exec emacs")
#+END_SRC

** other keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-d") "exec")
  (define-key *top-map* (kbd "s-c") "exec rofi -show drun")

  (define-key *top-map* (kbd "s-g") "abort")
#+END_SRC

** controller keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  ;; volume control
  (define-key *top-map* (kbd "XF86AudioMute") "volume toggle-mute")
  (define-key *top-map* (kbd "C-XF86AudioMute") "volume force-mute")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume inc 10")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "volume dec 10")
  (define-key *top-map* (kbd "S-XF86AudioRaiseVolume") "volume inc 2")
  (define-key *top-map* (kbd "S-XF86AudioLowerVolume") "volume dec 2")

  ;; player control
  (define-key *top-map* (kbd "XF86AudioPlay") "player toggle-play")
  (define-key *top-map* (kbd "XF86AudioPrev") "player prev")
  (define-key *top-map* (kbd "XF86AudioNext") "player next")

  ;; screenshot
  (define-key *top-map* (kbd "SunPrint_Screen") "exec scrot -f ~/captures/%Y-%m-%d_%H:%M:%S.png")
  (define-key *top-map* (kbd "C-SunPrint_Screen") "exec scrot -u -f ~/captures/\\$W.%Y-%m-%d_%H:%M:%S.png")
  (define-key *top-map* (kbd "M-SunPrint_Screen") "exec scrot -s -f ~/captures/%Y-%m-%d_%H:%M:%S.png")
#+END_SRC

** system keys

#+BEGIN_SRC common-lisp :tangle init.lisp
  (defvar *system-map* (make-sparse-keymap))

  (define-key *system-map* (kbd "S") "system power-off")
  (define-key *system-map* (kbd "r") "system reboot")
  (define-key *system-map* (kbd "s") "system sleep")
  (define-key *system-map* (kbd "x") "system lock")

  ;; (define-key *root-map* (kbd "x") '*system-map*)
  (define-key *top-map* (kbd "s-x") '*system-map*)
#+END_SRC

* group setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (grename "home")
#+END_SRC

* mode-line setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf *time-format-string* "%a %b %e %Y %k:%M:%S")
  (setf *screen-mode-line-format*
  	(list "[%n]"
  	      "%v"
  	      "^>"
  	      " | %C"
  	      " | %M"
  	      " | %l"
  	      " | %d"
  	      " | %T"))
  (setf *mode-line-timeout* 1)
  (setf *mode-line-position* :bottom)
  (setf *mode-line-background-color* "#000000")
  (setf *mode-line-foreground-color* "#FFFFFF")
#+END_SRC

** cpu setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf cpu::*cpu-modeline-fmt* "%c (%f)")
#+END_SRC

** start mode-line

#+BEGIN_SRC common-lisp :tangle init.lisp
  (mode-line)
#+END_SRC

** stumptray setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf stumptray::*tray-viwin-background* *mode-line-background-color*)
  (setf stumptray::*tray-placeholder-pixels-per-space* 7)

  (stumptray::stumptray)
#+END_SRC

* other setup

#+BEGIN_SRC common-lisp :tangle init.lisp
  (setf *mouse-focus-policy* :sloppy)

  (setf *message-window-gravity* :center
        ,*message-window-input-gravity* :center
        ,*input-window-gravity* :center)
#+END_SRC

* spawn once

#+BEGIN_SRC common-lisp :tangle init.lisp
  (loop for cmd in (list "~/.fehbg"
  		       "xsetroot -cursor_name left_ptr"
  		       "picom"
  		       "nm-applet"
  		       "dunst")
        do (run-shell-command cmd))
#+END_SRC
